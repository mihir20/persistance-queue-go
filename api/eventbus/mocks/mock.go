// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_eventbus is a generated GoMock package.
package mock_eventbus

import (
	event "persistent-queue/api/event"
	eventbus "persistent-queue/api/eventbus"
	taskqueue "persistent-queue/api/taskqueue"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// CountEventsInQueue mocks base method.
func (m *MockIService) CountEventsInQueue() (map[taskqueue.TaskQueue]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEventsInQueue")
	ret0, _ := ret[0].(map[taskqueue.TaskQueue]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEventsInQueue indicates an expected call of CountEventsInQueue.
func (mr *MockIServiceMockRecorder) CountEventsInQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEventsInQueue", reflect.TypeOf((*MockIService)(nil).CountEventsInQueue))
}

// DequeueEventFromTaskQueue mocks base method.
func (m *MockIService) DequeueEventFromTaskQueue(queue taskqueue.TaskQueue, passengerEvent *eventbus.PassengerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueEventFromTaskQueue", queue, passengerEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// DequeueEventFromTaskQueue indicates an expected call of DequeueEventFromTaskQueue.
func (mr *MockIServiceMockRecorder) DequeueEventFromTaskQueue(queue, passengerEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueEventFromTaskQueue", reflect.TypeOf((*MockIService)(nil).DequeueEventFromTaskQueue), queue, passengerEvent)
}

// EnqueueEvent mocks base method.
func (m *MockIService) EnqueueEvent(event *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueEvent indicates an expected call of EnqueueEvent.
func (mr *MockIServiceMockRecorder) EnqueueEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueEvent", reflect.TypeOf((*MockIService)(nil).EnqueueEvent), event)
}

// GetEventToProcess mocks base method.
func (m *MockIService) GetEventToProcess(queue taskqueue.TaskQueue) (*eventbus.PassengerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventToProcess", queue)
	ret0, _ := ret[0].(*eventbus.PassengerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventToProcess indicates an expected call of GetEventToProcess.
func (mr *MockIServiceMockRecorder) GetEventToProcess(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventToProcess", reflect.TypeOf((*MockIService)(nil).GetEventToProcess), queue)
}

// UpdatePassengerEvent mocks base method.
func (m *MockIService) UpdatePassengerEvent(queue taskqueue.TaskQueue, oldPassenger, updatedPassengerEvent *eventbus.PassengerEvent, nextExecutionTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassengerEvent", queue, oldPassenger, updatedPassengerEvent, nextExecutionTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassengerEvent indicates an expected call of UpdatePassengerEvent.
func (mr *MockIServiceMockRecorder) UpdatePassengerEvent(queue, oldPassenger, updatedPassengerEvent, nextExecutionTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassengerEvent", reflect.TypeOf((*MockIService)(nil).UpdatePassengerEvent), queue, oldPassenger, updatedPassengerEvent, nextExecutionTime)
}
